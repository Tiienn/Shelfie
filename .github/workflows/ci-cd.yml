name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_CLIENT: shelfie/client
  IMAGE_NAME_SERVER: shelfie/server

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint client
        run: npm run lint:client

      - name: Lint server
        run: npm run lint:server

      - name: Type check client
        run: npm run typecheck:client

      - name: Type check server
        run: npm run typecheck:server

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Test Suite
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shelfie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/shelfie_test
        run: |
          cd server
          npm run db:migrate

      - name: Run client tests
        run: npm run test:client -- --coverage --watchAll=false

      - name: Run server tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/shelfie_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm run test:server -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: cd client && npx playwright install --with-deps

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run E2E tests
        run: cd client && npm run test:e2e

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: client/playwright-report/

      - name: Stop services
        if: always()
        run: docker-compose down

  # Build Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-scan, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      client-image: ${{ steps.meta-client.outputs.tags }}
      server-image: ${{ steps.meta-server.outputs.tags }}
      client-digest: ${{ steps.build-client.outputs.digest }}
      server-digest: ${{ steps.build-server.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Build and push client image
        id: build-client
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push server image
        id: build-server
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.shelfie.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to staging
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
          CLIENT_IMAGE: ${{ needs.build.outputs.client-image }}
          SERVER_IMAGE: ${{ needs.build.outputs.server-image }}
        run: |
          echo "$KUBE_CONFIG" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          
          cd k8s/staging
          kustomize edit set image client=$CLIENT_IMAGE
          kustomize edit set image server=$SERVER_IMAGE
          kustomize build . | kubectl apply -f -
          
          kubectl rollout status deployment/shelfie-client -n shelfie-staging
          kubectl rollout status deployment/shelfie-server -n shelfie-staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://shelfie.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to production
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          CLIENT_IMAGE: ${{ needs.build.outputs.client-image }}
          SERVER_IMAGE: ${{ needs.build.outputs.server-image }}
        run: |
          echo "$KUBE_CONFIG" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          
          cd k8s/production
          kustomize edit set image client=$CLIENT_IMAGE
          kustomize edit set image server=$SERVER_IMAGE
          kustomize build . | kubectl apply -f -
          
          kubectl rollout status deployment/shelfie-client -n shelfie-production
          kubectl rollout status deployment/shelfie-server -n shelfie-production

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://shelfie.app/health || exit 1
          curl -f https://api.shelfie.app/health || exit 1

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run load tests
        run: |
          cd server/tests/load
          artillery run --target https://api.staging.shelfie.app artillery.yml

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security Scanning
  security-scan-images:
    name: Scan Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Run Trivy vulnerability scanner - Client
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.client-image }}
          format: 'sarif'
          output: 'client-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner - Server
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.server-image }}
          format: 'sarif'
          output: 'server-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '.'